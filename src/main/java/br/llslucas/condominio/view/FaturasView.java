/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package br.llslucas.condominio.view;

import br.llslucas.condominio.controller.FaturaController;
import br.llslucas.condominio.controller.MoradorController;
import br.llslucas.condominio.controller.ResidenciaController;
import br.llslucas.condominio.model.Fatura;
import br.llslucas.condominio.model.Morador;
import br.llslucas.condominio.model.Residencia;
import java.awt.CardLayout;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lucas
 */
public class FaturasView extends javax.swing.JPanel {

  private final ResidenciaController residenciaController;
  private final MoradorController moradorController;
  private final FaturaController faturaController;

  private static Long moradorIdFilter = null;
  private static Long residenciaIdFilter = null;

  /**
   * Creates new form ResidenciaView
   *
   * @param residenciaController
   * @param moradorController
   * @param faturaController
   */
  public FaturasView(ResidenciaController residenciaController, MoradorController moradorController, FaturaController faturaController) {
    initComponents();
    this.residenciaController = residenciaController;
    this.moradorController = moradorController;
    this.faturaController = faturaController;
  }

  public static void setMoradorFilter(Long id) {
    moradorIdFilter = id;
    residenciaIdFilter = null;
  }

  public static void setResidenciaFilter(Long id) {
    moradorIdFilter = null;
    residenciaIdFilter = id;
  }

  @Override
  public void setVisible(boolean aFlag) {
    super.setVisible(aFlag);

    if (aFlag) {
      preencherTabela();
    } else {
      moradorIdFilter = null;
      residenciaIdFilter = null;
    }
  }

  public final void preencherTabela() {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    table.setModel(model);
    table.selectAll();
    model.setRowCount(0);

    Map<Long, Fatura> faturas;

    try {
      if (moradorIdFilter != null && residenciaIdFilter == null) {
	faturas = faturaController.listByMorador(moradorIdFilter);
      } else if (residenciaIdFilter != null && moradorIdFilter == null) {
	faturas = faturaController.listByResidencia(residenciaIdFilter);
      } else {
	faturas = faturaController.list();
      }

      faturas.forEach((i, fatura) -> {
	Morador proprietario;
	Residencia residencia;

	try {
	  proprietario = this.moradorController.getById(fatura.getMoradorId());
	} catch (Exception ex) {
	  proprietario = null;
	}

	try {
	  residencia = this.residenciaController.getById(fatura.getResidenciaId());
	} catch (Exception ex) {
	  residencia = null;
	}

	Object[] data = {
	  String.valueOf(i),
	  fatura.getValor(),
	  fatura.getDataVencimento().toLocalDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")),
	  fatura.getDataPagamento() != null ? fatura.getDataPagamento().toLocalDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : null,
	  fatura.getStatus(),
	  residencia,
	  proprietario
	};

	model.addRow(data);
      });
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this,
	      "Não foi possível realizar a conexão com o banco de dados, verifique se está ativo ou se foi configurado corretamente.",
	      "Erro", JOptionPane.ERROR_MESSAGE);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    scrollPane = new javax.swing.JScrollPane();
    table = new javax.swing.JTable();
    jPanel1 = new javax.swing.JPanel();
    btnCadastrar = new javax.swing.JButton();
    btnExcluir = new javax.swing.JButton();
    btnPagar = new javax.swing.JButton();
    btnLimparFiltro = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();

    setPreferredSize(new java.awt.Dimension(860, 547));

    scrollPane.setMinimumSize(new java.awt.Dimension(715, 16));

    table.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null, null, null, null}
      },
      new String [] {
        "id", "Valor", "Vencimento", "Pagamento", "Status", "Residencia", "Proprietario"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.Long.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false, false, false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    table.setColumnSelectionAllowed(true);
    table.getTableHeader().setReorderingAllowed(false);
    scrollPane.setViewportView(table);
    table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    if (table.getColumnModel().getColumnCount() > 0) {
      table.getColumnModel().getColumn(0).setResizable(false);
      table.getColumnModel().getColumn(0).setPreferredWidth(50);
    }

    btnCadastrar.setText("Cadastrar");
    btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCadastrarActionPerformed(evt);
      }
    });

    btnExcluir.setText("Excluir");
    btnExcluir.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnExcluirActionPerformed(evt);
      }
    });

    btnPagar.setText("Pagar");
    btnPagar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnPagarActionPerformed(evt);
      }
    });

    btnLimparFiltro.setText("Limpar Filtro");
    btnLimparFiltro.setActionCommand("Limpar Filtros");
    btnLimparFiltro.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnLimparFiltroActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap(17, Short.MAX_VALUE)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(btnLimparFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(20, 20, 20))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(20, 20, 20)
        .addComponent(btnCadastrar)
        .addGap(20, 20, 20)
        .addComponent(btnExcluir)
        .addGap(20, 20, 20)
        .addComponent(btnPagar)
        .addGap(20, 20, 20)
        .addComponent(btnLimparFiltro)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
    jLabel1.setText("Faturas");
    jLabel1.setMaximumSize(new java.awt.Dimension(848, 20));
    jLabel1.setMinimumSize(new java.awt.Dimension(848, 20));
    jLabel1.setPreferredSize(new java.awt.Dimension(848, 20));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, 0)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void btnLimparFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparFiltroActionPerformed
    moradorIdFilter = null;
    residenciaIdFilter = null;
    preencherTabela();
  }//GEN-LAST:event_btnLimparFiltroActionPerformed

  private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
    int row = table.getSelectedRow();

    if (row == -1) {
      JOptionPane.showMessageDialog(this, "Selecione uma linha primeiro!", "Erro", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Long id = Long.valueOf((String) table.getValueAt(row, 0));
    Fatura fatura;

    try {
      fatura = this.faturaController.getById(id);
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "O condomínio selecionado não existe.", "Erro", JOptionPane.ERROR_MESSAGE);
      return;
    }
    
    if(fatura.getStatus().equals("Pago")){
      JOptionPane.showMessageDialog(this, "A fatura já está paga.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
      return;
    }

    try {
      this.faturaController.pagarFatura(fatura);
      JOptionPane.showMessageDialog(this, "Fatura paga com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
      preencherTabela();
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this,
	      "Falha ao pagar a fatura, verifique o erro abaixo: \n" + ex.getMessage(), "Erro",
	      JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_btnPagarActionPerformed

  private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCadastrarActionPerformed
    JPanel parent = (JPanel) this.getParent();
    CardLayout layout = (CardLayout) parent.getLayout();
    layout.show(parent, "cadastroFaturas");
  }// GEN-LAST:event_btnCadastrarActionPerformed

  private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnExcluirActionPerformed
    int row = table.getSelectedRow();

    if (row == -1) {
      JOptionPane.showMessageDialog(this, "Selecione uma linha primeiro!", "Erro", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Long id = Long.valueOf((String) table.getValueAt(row, 0));
    Fatura fatura;

    try {
      fatura = this.faturaController.getById(id);
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "O condomínio selecionado não existe.", "Erro", JOptionPane.ERROR_MESSAGE);
      return;
    }

    int opt = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o residencia?", "Aviso",
	    JOptionPane.OK_CANCEL_OPTION);

    try {
      if (opt == 0) {
	this.faturaController.delete(fatura);
	preencherTabela();
      }
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this,
	      "Falha ao excluir a fatura, verifique o erro abaixo: \n" + ex.getMessage(), "Erro",
	      JOptionPane.ERROR_MESSAGE);
    }
  }// GEN-LAST:event_btnExcluirActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnCadastrar;
  private javax.swing.JButton btnExcluir;
  private javax.swing.JButton btnLimparFiltro;
  private javax.swing.JButton btnPagar;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JTable table;
  // End of variables declaration//GEN-END:variables
}
